How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Comparing two versions of the file helped because the bug was not present in the old version. This means that some new code
	must be the cause of the bug and allowed me to pinpoint the culprit.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having access to the entire history of a file would allow me to see what changes were made and when.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I feel like one con is that it is up to the programmer to exercise good judgment of when to commit. A pro would be that it
	allows the programmer to create the most meaningful collection of commits throughout the life of a project.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    I think some version control systems allow saving multiple files in one commit because there are cases where files are related.

How can you use the commands git log and git diff to view the history of files?

    Git log will allow you to see all of your commits within a repository and git diff allows you to compare the differnces between files.

How might using version control make you more confident to make changes that
could break something?

    It will allow you to make changes while knowing that you will always be able to revert to an old version if things go wrong.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to try using git to make branches and then merge those branches.
